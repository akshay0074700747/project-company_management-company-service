// Code generated by MockGen. DO NOT EDIT.
// Source: adapterInterfaces.go

// Package mock_adapters is a generated GoMock package.
package mock_adapters

import (
	context "context"
	io "io"
	reflect "reflect"
	time "time"

	entities "github.com/akshay0074700747/project-company_management-company-service/entities"
	gomock "github.com/golang/mock/gomock"
	minio "github.com/minio/minio-go/v7"
)

// MockCompanyAdapterInterfaces is a mock of CompanyAdapterInterfaces interface.
type MockCompanyAdapterInterfaces struct {
	ctrl     *gomock.Controller
	recorder *MockCompanyAdapterInterfacesMockRecorder
}

// MockCompanyAdapterInterfacesMockRecorder is the mock recorder for MockCompanyAdapterInterfaces.
type MockCompanyAdapterInterfacesMockRecorder struct {
	mock *MockCompanyAdapterInterfaces
}

// NewMockCompanyAdapterInterfaces creates a new mock instance.
func NewMockCompanyAdapterInterfaces(ctrl *gomock.Controller) *MockCompanyAdapterInterfaces {
	mock := &MockCompanyAdapterInterfaces{ctrl: ctrl}
	mock.recorder = &MockCompanyAdapterInterfacesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCompanyAdapterInterfaces) EXPECT() *MockCompanyAdapterInterfacesMockRecorder {
	return m.recorder
}

// AddCompanyType mocks base method.
func (m *MockCompanyAdapterInterfaces) AddCompanyType(arg0 entities.CompanyTypes) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCompanyType", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddCompanyType indicates an expected call of AddCompanyType.
func (mr *MockCompanyAdapterInterfacesMockRecorder) AddCompanyType(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCompanyType", reflect.TypeOf((*MockCompanyAdapterInterfaces)(nil).AddCompanyType), arg0)
}

// AddMember mocks base method.
func (m *MockCompanyAdapterInterfaces) AddMember(arg0 entities.CompanyMembers) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMember", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddMember indicates an expected call of AddMember.
func (mr *MockCompanyAdapterInterfacesMockRecorder) AddMember(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMember", reflect.TypeOf((*MockCompanyAdapterInterfaces)(nil).AddMember), arg0)
}

// AddMemberStatueses mocks base method.
func (m *MockCompanyAdapterInterfaces) AddMemberStatueses(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMemberStatueses", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddMemberStatueses indicates an expected call of AddMemberStatueses.
func (mr *MockCompanyAdapterInterfacesMockRecorder) AddMemberStatueses(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMemberStatueses", reflect.TypeOf((*MockCompanyAdapterInterfaces)(nil).AddMemberStatueses), arg0)
}

// AddOwner mocks base method.
func (m *MockCompanyAdapterInterfaces) AddOwner(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOwner", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddOwner indicates an expected call of AddOwner.
func (mr *MockCompanyAdapterInterfacesMockRecorder) AddOwner(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOwner", reflect.TypeOf((*MockCompanyAdapterInterfaces)(nil).AddOwner), arg0, arg1)
}

// AddPermissions mocks base method.
func (m *MockCompanyAdapterInterfaces) AddPermissions(arg0 entities.Permissions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPermissions", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPermissions indicates an expected call of AddPermissions.
func (mr *MockCompanyAdapterInterfacesMockRecorder) AddPermissions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPermissions", reflect.TypeOf((*MockCompanyAdapterInterfaces)(nil).AddPermissions), arg0)
}

// ApplyforJob mocks base method.
func (m *MockCompanyAdapterInterfaces) ApplyforJob(arg0 entities.JobApplications) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyforJob", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplyforJob indicates an expected call of ApplyforJob.
func (mr *MockCompanyAdapterInterfacesMockRecorder) ApplyforJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyforJob", reflect.TypeOf((*MockCompanyAdapterInterfaces)(nil).ApplyforJob), arg0)
}

// ApplyforLeave mocks base method.
func (m *MockCompanyAdapterInterfaces) ApplyforLeave(arg0 entities.Leaves) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyforLeave", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplyforLeave indicates an expected call of ApplyforLeave.
func (mr *MockCompanyAdapterInterfacesMockRecorder) ApplyforLeave(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyforLeave", reflect.TypeOf((*MockCompanyAdapterInterfaces)(nil).ApplyforLeave), arg0)
}

// AssignProblemToEmployee mocks base method.
func (m *MockCompanyAdapterInterfaces) AssignProblemToEmployee(arg0 string, arg1 uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignProblemToEmployee", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssignProblemToEmployee indicates an expected call of AssignProblemToEmployee.
func (mr *MockCompanyAdapterInterfacesMockRecorder) AssignProblemToEmployee(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignProblemToEmployee", reflect.TypeOf((*MockCompanyAdapterInterfaces)(nil).AssignProblemToEmployee), arg0, arg1)
}

// AttachClientwithProject mocks base method.
func (m *MockCompanyAdapterInterfaces) AttachClientwithProject(arg0 entities.Clients, arg1 string, arg2 uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AttachClientwithProject", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AttachClientwithProject indicates an expected call of AttachClientwithProject.
func (mr *MockCompanyAdapterInterfacesMockRecorder) AttachClientwithProject(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachClientwithProject", reflect.TypeOf((*MockCompanyAdapterInterfaces)(nil).AttachClientwithProject), arg0, arg1, arg2)
}

// AttachCompanyRoleAndPermissions mocks base method.
func (m *MockCompanyAdapterInterfaces) AttachCompanyRoleAndPermissions(arg0 entities.CompanyRoles) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AttachCompanyRoleAndPermissions", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AttachCompanyRoleAndPermissions indicates an expected call of AttachCompanyRoleAndPermissions.
func (mr *MockCompanyAdapterInterfacesMockRecorder) AttachCompanyRoleAndPermissions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachCompanyRoleAndPermissions", reflect.TypeOf((*MockCompanyAdapterInterfaces)(nil).AttachCompanyRoleAndPermissions), arg0)
}

// DeleteJob mocks base method.
func (m *MockCompanyAdapterInterfaces) DeleteJob(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteJob", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteJob indicates an expected call of DeleteJob.
func (mr *MockCompanyAdapterInterfacesMockRecorder) DeleteJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteJob", reflect.TypeOf((*MockCompanyAdapterInterfaces)(nil).DeleteJob), arg0)
}

// DeleteProblem mocks base method.
func (m *MockCompanyAdapterInterfaces) DeleteProblem(arg0 uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProblem", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProblem indicates an expected call of DeleteProblem.
func (mr *MockCompanyAdapterInterfacesMockRecorder) DeleteProblem(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProblem", reflect.TypeOf((*MockCompanyAdapterInterfaces)(nil).DeleteProblem), arg0)
}

// DropClient mocks base method.
func (m *MockCompanyAdapterInterfaces) DropClient(arg0 entities.Clients) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DropClient", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DropClient indicates an expected call of DropClient.
func (mr *MockCompanyAdapterInterfacesMockRecorder) DropClient(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropClient", reflect.TypeOf((*MockCompanyAdapterInterfaces)(nil).DropClient), arg0)
}

// DropCompany mocks base method.
func (m *MockCompanyAdapterInterfaces) DropCompany(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DropCompany", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DropCompany indicates an expected call of DropCompany.
func (mr *MockCompanyAdapterInterfacesMockRecorder) DropCompany(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropCompany", reflect.TypeOf((*MockCompanyAdapterInterfaces)(nil).DropCompany), arg0)
}

// EditCompanyDetails mocks base method.
func (m *MockCompanyAdapterInterfaces) EditCompanyDetails(arg0 entities.Credentials) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditCompanyDetails", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// EditCompanyDetails indicates an expected call of EditCompanyDetails.
func (mr *MockCompanyAdapterInterfacesMockRecorder) EditCompanyDetails(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditCompanyDetails", reflect.TypeOf((*MockCompanyAdapterInterfaces)(nil).EditCompanyDetails), arg0)
}

// EditCompanyEmployees mocks base method.
func (m *MockCompanyAdapterInterfaces) EditCompanyEmployees(arg0 entities.CompanyMembers) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditCompanyEmployees", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// EditCompanyEmployees indicates an expected call of EditCompanyEmployees.
func (mr *MockCompanyAdapterInterfacesMockRecorder) EditCompanyEmployees(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditCompanyEmployees", reflect.TypeOf((*MockCompanyAdapterInterfaces)(nil).EditCompanyEmployees), arg0)
}

// EditProblem mocks base method.
func (m *MockCompanyAdapterInterfaces) EditProblem(arg0 entities.Problems) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditProblem", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// EditProblem indicates an expected call of EditProblem.
func (mr *MockCompanyAdapterInterfacesMockRecorder) EditProblem(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditProblem", reflect.TypeOf((*MockCompanyAdapterInterfaces)(nil).EditProblem), arg0)
}

// GetApplicationsforJob mocks base method.
func (m *MockCompanyAdapterInterfaces) GetApplicationsforJob(arg0 string) ([]entities.JobApplications, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationsforJob", arg0)
	ret0, _ := ret[0].([]entities.JobApplications)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationsforJob indicates an expected call of GetApplicationsforJob.
func (mr *MockCompanyAdapterInterfacesMockRecorder) GetApplicationsforJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationsforJob", reflect.TypeOf((*MockCompanyAdapterInterfaces)(nil).GetApplicationsforJob), arg0)
}

// GetAppliedLeaves mocks base method.
func (m *MockCompanyAdapterInterfaces) GetAppliedLeaves(arg0 string) ([]entities.Leaves, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppliedLeaves", arg0)
	ret0, _ := ret[0].([]entities.Leaves)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppliedLeaves indicates an expected call of GetAppliedLeaves.
func (mr *MockCompanyAdapterInterfacesMockRecorder) GetAppliedLeaves(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppliedLeaves", reflect.TypeOf((*MockCompanyAdapterInterfaces)(nil).GetAppliedLeaves), arg0)
}

// GetAssignedProblems mocks base method.
func (m *MockCompanyAdapterInterfaces) GetAssignedProblems(arg0, arg1 string) ([]entities.Problems, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAssignedProblems", arg0, arg1)
	ret0, _ := ret[0].([]entities.Problems)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAssignedProblems indicates an expected call of GetAssignedProblems.
func (mr *MockCompanyAdapterInterfacesMockRecorder) GetAssignedProblems(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssignedProblems", reflect.TypeOf((*MockCompanyAdapterInterfaces)(nil).GetAssignedProblems), arg0, arg1)
}

// GetAverageSalaryperRole mocks base method.
func (m *MockCompanyAdapterInterfaces) GetAverageSalaryperRole(arg0 string) ([]entities.AverageSalaryperRoleUsecase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAverageSalaryperRole", arg0)
	ret0, _ := ret[0].([]entities.AverageSalaryperRoleUsecase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAverageSalaryperRole indicates an expected call of GetAverageSalaryperRole.
func (mr *MockCompanyAdapterInterfacesMockRecorder) GetAverageSalaryperRole(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAverageSalaryperRole", reflect.TypeOf((*MockCompanyAdapterInterfaces)(nil).GetAverageSalaryperRole), arg0)
}

// GetClientID mocks base method.
func (m *MockCompanyAdapterInterfaces) GetClientID(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientID", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientID indicates an expected call of GetClientID.
func (mr *MockCompanyAdapterInterfacesMockRecorder) GetClientID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientID", reflect.TypeOf((*MockCompanyAdapterInterfaces)(nil).GetClientID), arg0)
}

// GetClients mocks base method.
func (m *MockCompanyAdapterInterfaces) GetClients(arg0 string) ([]entities.GetClientsUsecase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClients", arg0)
	ret0, _ := ret[0].([]entities.GetClientsUsecase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClients indicates an expected call of GetClients.
func (mr *MockCompanyAdapterInterfacesMockRecorder) GetClients(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClients", reflect.TypeOf((*MockCompanyAdapterInterfaces)(nil).GetClients), arg0)
}

// GetCompanyDetails mocks base method.
func (m *MockCompanyAdapterInterfaces) GetCompanyDetails(arg0 string) (entities.Credentials, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompanyDetails", arg0)
	ret0, _ := ret[0].(entities.Credentials)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompanyDetails indicates an expected call of GetCompanyDetails.
func (mr *MockCompanyAdapterInterfacesMockRecorder) GetCompanyDetails(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompanyDetails", reflect.TypeOf((*MockCompanyAdapterInterfaces)(nil).GetCompanyDetails), arg0)
}

// GetCompanyIDFromName mocks base method.
func (m *MockCompanyAdapterInterfaces) GetCompanyIDFromName(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompanyIDFromName", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompanyIDFromName indicates an expected call of GetCompanyIDFromName.
func (mr *MockCompanyAdapterInterfacesMockRecorder) GetCompanyIDFromName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompanyIDFromName", reflect.TypeOf((*MockCompanyAdapterInterfaces)(nil).GetCompanyIDFromName), arg0)
}

// GetCompanyMembers mocks base method.
func (m *MockCompanyAdapterInterfaces) GetCompanyMembers(arg0 string) ([]entities.GetCompanyEmployeesUsecase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompanyMembers", arg0)
	ret0, _ := ret[0].([]entities.GetCompanyEmployeesUsecase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompanyMembers indicates an expected call of GetCompanyMembers.
func (mr *MockCompanyAdapterInterfacesMockRecorder) GetCompanyMembers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompanyMembers", reflect.TypeOf((*MockCompanyAdapterInterfaces)(nil).GetCompanyMembers), arg0)
}

// GetCompanyTypes mocks base method.
func (m *MockCompanyAdapterInterfaces) GetCompanyTypes() ([]entities.CompanyTypes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompanyTypes")
	ret0, _ := ret[0].([]entities.CompanyTypes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompanyTypes indicates an expected call of GetCompanyTypes.
func (mr *MockCompanyAdapterInterfacesMockRecorder) GetCompanyTypes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompanyTypes", reflect.TypeOf((*MockCompanyAdapterInterfaces)(nil).GetCompanyTypes))
}

// GetDetialsodApplicationbyID mocks base method.
func (m *MockCompanyAdapterInterfaces) GetDetialsodApplicationbyID(arg0 string) (entities.JobApplications, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDetialsodApplicationbyID", arg0)
	ret0, _ := ret[0].(entities.JobApplications)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDetialsodApplicationbyID indicates an expected call of GetDetialsodApplicationbyID.
func (mr *MockCompanyAdapterInterfacesMockRecorder) GetDetialsodApplicationbyID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDetialsodApplicationbyID", reflect.TypeOf((*MockCompanyAdapterInterfaces)(nil).GetDetialsodApplicationbyID), arg0)
}

// GetEmployeeLeaderBoard mocks base method.
func (m *MockCompanyAdapterInterfaces) GetEmployeeLeaderBoard(arg0 string) ([]entities.GetEmployeeLeaderBoardUsecase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmployeeLeaderBoard", arg0)
	ret0, _ := ret[0].([]entities.GetEmployeeLeaderBoardUsecase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmployeeLeaderBoard indicates an expected call of GetEmployeeLeaderBoard.
func (mr *MockCompanyAdapterInterfacesMockRecorder) GetEmployeeLeaderBoard(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmployeeLeaderBoard", reflect.TypeOf((*MockCompanyAdapterInterfaces)(nil).GetEmployeeLeaderBoard), arg0)
}

// GetJobApplicationsofUser mocks base method.
func (m *MockCompanyAdapterInterfaces) GetJobApplicationsofUser(arg0 string) ([]entities.GetJobApplicationsofUserUsecase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobApplicationsofUser", arg0)
	ret0, _ := ret[0].([]entities.GetJobApplicationsofUserUsecase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobApplicationsofUser indicates an expected call of GetJobApplicationsofUser.
func (mr *MockCompanyAdapterInterfacesMockRecorder) GetJobApplicationsofUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobApplicationsofUser", reflect.TypeOf((*MockCompanyAdapterInterfaces)(nil).GetJobApplicationsofUser), arg0)
}

// GetJobs mocks base method.
func (m *MockCompanyAdapterInterfaces) GetJobs(arg0 map[string]interface{}) ([]entities.Jobs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobs", arg0)
	ret0, _ := ret[0].([]entities.Jobs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobs indicates an expected call of GetJobs.
func (mr *MockCompanyAdapterInterfacesMockRecorder) GetJobs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobs", reflect.TypeOf((*MockCompanyAdapterInterfaces)(nil).GetJobs), arg0)
}

// GetJobsofCompany mocks base method.
func (m *MockCompanyAdapterInterfaces) GetJobsofCompany(arg0 string) ([]entities.Jobs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobsofCompany", arg0)
	ret0, _ := ret[0].([]entities.Jobs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobsofCompany indicates an expected call of GetJobsofCompany.
func (mr *MockCompanyAdapterInterfacesMockRecorder) GetJobsofCompany(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobsofCompany", reflect.TypeOf((*MockCompanyAdapterInterfaces)(nil).GetJobsofCompany), arg0)
}

// GetLeaves mocks base method.
func (m *MockCompanyAdapterInterfaces) GetLeaves(arg0 string) ([]entities.Leaves, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLeaves", arg0)
	ret0, _ := ret[0].([]entities.Leaves)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLeaves indicates an expected call of GetLeaves.
func (mr *MockCompanyAdapterInterfacesMockRecorder) GetLeaves(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLeaves", reflect.TypeOf((*MockCompanyAdapterInterfaces)(nil).GetLeaves), arg0)
}

// GetNoofMembers mocks base method.
func (m *MockCompanyAdapterInterfaces) GetNoofMembers(arg0 string) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNoofMembers", arg0)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNoofMembers indicates an expected call of GetNoofMembers.
func (mr *MockCompanyAdapterInterfacesMockRecorder) GetNoofMembers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNoofMembers", reflect.TypeOf((*MockCompanyAdapterInterfaces)(nil).GetNoofMembers), arg0)
}

// GetPastProjects mocks base method.
func (m *MockCompanyAdapterInterfaces) GetPastProjects(arg0 string) ([]entities.GetPastProjectsUsecase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPastProjects", arg0)
	ret0, _ := ret[0].([]entities.GetPastProjectsUsecase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPastProjects indicates an expected call of GetPastProjects.
func (mr *MockCompanyAdapterInterfacesMockRecorder) GetPastProjects(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPastProjects", reflect.TypeOf((*MockCompanyAdapterInterfaces)(nil).GetPastProjects), arg0)
}

// GetPermission mocks base method.
func (m *MockCompanyAdapterInterfaces) GetPermission(arg0 uint) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPermission", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPermission indicates an expected call of GetPermission.
func (mr *MockCompanyAdapterInterfacesMockRecorder) GetPermission(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPermission", reflect.TypeOf((*MockCompanyAdapterInterfaces)(nil).GetPermission), arg0)
}

// GetPermissions mocks base method.
func (m *MockCompanyAdapterInterfaces) GetPermissions() ([]entities.Permissions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPermissions")
	ret0, _ := ret[0].([]entities.Permissions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPermissions indicates an expected call of GetPermissions.
func (mr *MockCompanyAdapterInterfacesMockRecorder) GetPermissions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPermissions", reflect.TypeOf((*MockCompanyAdapterInterfaces)(nil).GetPermissions))
}

// GetProblems mocks base method.
func (m *MockCompanyAdapterInterfaces) GetProblems(arg0 string) ([]entities.Problems, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProblems", arg0)
	ret0, _ := ret[0].([]entities.Problems)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProblems indicates an expected call of GetProblems.
func (mr *MockCompanyAdapterInterfacesMockRecorder) GetProblems(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProblems", reflect.TypeOf((*MockCompanyAdapterInterfaces)(nil).GetProblems), arg0)
}

// GetProfileViews mocks base method.
func (m *MockCompanyAdapterInterfaces) GetProfileViews(arg0 string, arg1, arg2 time.Time) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfileViews", arg0, arg1, arg2)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfileViews indicates an expected call of GetProfileViews.
func (mr *MockCompanyAdapterInterfacesMockRecorder) GetProfileViews(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfileViews", reflect.TypeOf((*MockCompanyAdapterInterfaces)(nil).GetProfileViews), arg0, arg1, arg2)
}

// GetRevenuesGenerated mocks base method.
func (m *MockCompanyAdapterInterfaces) GetRevenuesGenerated(arg0 string) ([]entities.GetRevenueGeneratedUsecase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRevenuesGenerated", arg0)
	ret0, _ := ret[0].([]entities.GetRevenueGeneratedUsecase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRevenuesGenerated indicates an expected call of GetRevenuesGenerated.
func (mr *MockCompanyAdapterInterfacesMockRecorder) GetRevenuesGenerated(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRevenuesGenerated", reflect.TypeOf((*MockCompanyAdapterInterfaces)(nil).GetRevenuesGenerated), arg0)
}

// GetRoleWithPermissionIDs mocks base method.
func (m *MockCompanyAdapterInterfaces) GetRoleWithPermissionIDs(arg0 string) ([]entities.CompanyRoles, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoleWithPermissionIDs", arg0)
	ret0, _ := ret[0].([]entities.CompanyRoles)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoleWithPermissionIDs indicates an expected call of GetRoleWithPermissionIDs.
func (mr *MockCompanyAdapterInterfacesMockRecorder) GetRoleWithPermissionIDs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoleWithPermissionIDs", reflect.TypeOf((*MockCompanyAdapterInterfaces)(nil).GetRoleWithPermissionIDs), arg0)
}

// GetScheduledInterviews mocks base method.
func (m *MockCompanyAdapterInterfaces) GetScheduledInterviews(arg0 string) ([]entities.ScheduledInterviews, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScheduledInterviews", arg0)
	ret0, _ := ret[0].([]entities.ScheduledInterviews)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetScheduledInterviews indicates an expected call of GetScheduledInterviews.
func (mr *MockCompanyAdapterInterfacesMockRecorder) GetScheduledInterviews(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScheduledInterviews", reflect.TypeOf((*MockCompanyAdapterInterfaces)(nil).GetScheduledInterviews), arg0)
}

// GetScheduledInterviewsofUser mocks base method.
func (m *MockCompanyAdapterInterfaces) GetScheduledInterviewsofUser(arg0 string) ([]entities.ScheduledInterviews, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScheduledInterviewsofUser", arg0)
	ret0, _ := ret[0].([]entities.ScheduledInterviews)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetScheduledInterviewsofUser indicates an expected call of GetScheduledInterviewsofUser.
func (mr *MockCompanyAdapterInterfacesMockRecorder) GetScheduledInterviewsofUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScheduledInterviewsofUser", reflect.TypeOf((*MockCompanyAdapterInterfaces)(nil).GetScheduledInterviewsofUser), arg0)
}

// GetShortlistedApplications mocks base method.
func (m *MockCompanyAdapterInterfaces) GetShortlistedApplications(arg0 string) ([]entities.JobApplications, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShortlistedApplications", arg0)
	ret0, _ := ret[0].([]entities.JobApplications)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShortlistedApplications indicates an expected call of GetShortlistedApplications.
func (mr *MockCompanyAdapterInterfacesMockRecorder) GetShortlistedApplications(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShortlistedApplications", reflect.TypeOf((*MockCompanyAdapterInterfaces)(nil).GetShortlistedApplications), arg0)
}

// GetVisitors mocks base method.
func (m *MockCompanyAdapterInterfaces) GetVisitors(arg0 string) ([]entities.Visitors, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVisitors", arg0)
	ret0, _ := ret[0].([]entities.Visitors)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVisitors indicates an expected call of GetVisitors.
func (mr *MockCompanyAdapterInterfacesMockRecorder) GetVisitors(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVisitors", reflect.TypeOf((*MockCompanyAdapterInterfaces)(nil).GetVisitors), arg0)
}

// GetVisitorsWithinTimeframe mocks base method.
func (m *MockCompanyAdapterInterfaces) GetVisitorsWithinTimeframe(arg0 string, arg1, arg2 time.Time) ([]entities.Visitors, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVisitorsWithinTimeframe", arg0, arg1, arg2)
	ret0, _ := ret[0].([]entities.Visitors)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVisitorsWithinTimeframe indicates an expected call of GetVisitorsWithinTimeframe.
func (mr *MockCompanyAdapterInterfacesMockRecorder) GetVisitorsWithinTimeframe(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVisitorsWithinTimeframe", reflect.TypeOf((*MockCompanyAdapterInterfaces)(nil).GetVisitorsWithinTimeframe), arg0, arg1, arg2)
}

// GrantLeave mocks base method.
func (m *MockCompanyAdapterInterfaces) GrantLeave(arg0 uint, arg1 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GrantLeave", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GrantLeave indicates an expected call of GrantLeave.
func (mr *MockCompanyAdapterInterfacesMockRecorder) GrantLeave(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GrantLeave", reflect.TypeOf((*MockCompanyAdapterInterfaces)(nil).GrantLeave), arg0, arg1)
}

// InsertAddress mocks base method.
func (m *MockCompanyAdapterInterfaces) InsertAddress(arg0 entities.CompanyAddress) (entities.CompanyAddress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertAddress", arg0)
	ret0, _ := ret[0].(entities.CompanyAddress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertAddress indicates an expected call of InsertAddress.
func (mr *MockCompanyAdapterInterfacesMockRecorder) InsertAddress(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertAddress", reflect.TypeOf((*MockCompanyAdapterInterfaces)(nil).InsertAddress), arg0)
}

// InsertCompanyCredentials mocks base method.
func (m *MockCompanyAdapterInterfaces) InsertCompanyCredentials(arg0 entities.Credentials, arg1, arg2 []string, arg3 entities.CompanyAddress, arg4 string) (entities.Credentials, []string, []string, entities.CompanyAddress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertCompanyCredentials", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(entities.Credentials)
	ret1, _ := ret[1].([]string)
	ret2, _ := ret[2].([]string)
	ret3, _ := ret[3].(entities.CompanyAddress)
	ret4, _ := ret[4].(error)
	return ret0, ret1, ret2, ret3, ret4
}

// InsertCompanyCredentials indicates an expected call of InsertCompanyCredentials.
func (mr *MockCompanyAdapterInterfacesMockRecorder) InsertCompanyCredentials(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertCompanyCredentials", reflect.TypeOf((*MockCompanyAdapterInterfaces)(nil).InsertCompanyCredentials), arg0, arg1, arg2, arg3, arg4)
}

// InsertEmail mocks base method.
func (m *MockCompanyAdapterInterfaces) InsertEmail(arg0 []entities.CompanyEmail) ([]entities.CompanyEmail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertEmail", arg0)
	ret0, _ := ret[0].([]entities.CompanyEmail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertEmail indicates an expected call of InsertEmail.
func (mr *MockCompanyAdapterInterfacesMockRecorder) InsertEmail(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertEmail", reflect.TypeOf((*MockCompanyAdapterInterfaces)(nil).InsertEmail), arg0)
}

// InsertIntoClients mocks base method.
func (m *MockCompanyAdapterInterfaces) InsertIntoClients(arg0 entities.Clients) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertIntoClients", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertIntoClients indicates an expected call of InsertIntoClients.
func (mr *MockCompanyAdapterInterfacesMockRecorder) InsertIntoClients(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertIntoClients", reflect.TypeOf((*MockCompanyAdapterInterfaces)(nil).InsertIntoClients), arg0)
}

// InsertPhone mocks base method.
func (m *MockCompanyAdapterInterfaces) InsertPhone(arg0 []entities.CompanyPhone) ([]entities.CompanyPhone, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertPhone", arg0)
	ret0, _ := ret[0].([]entities.CompanyPhone)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertPhone indicates an expected call of InsertPhone.
func (mr *MockCompanyAdapterInterfacesMockRecorder) InsertPhone(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertPhone", reflect.TypeOf((*MockCompanyAdapterInterfaces)(nil).InsertPhone), arg0)
}

// InsertResumetoMinio mocks base method.
func (m *MockCompanyAdapterInterfaces) InsertResumetoMinio(ctx context.Context, fileName string, reader io.Reader, objectSize int64, opts minio.PutObjectOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertResumetoMinio", ctx, fileName, reader, objectSize, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertResumetoMinio indicates an expected call of InsertResumetoMinio.
func (mr *MockCompanyAdapterInterfacesMockRecorder) InsertResumetoMinio(ctx, fileName, reader, objectSize, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertResumetoMinio", reflect.TypeOf((*MockCompanyAdapterInterfaces)(nil).InsertResumetoMinio), ctx, fileName, reader, objectSize, opts)
}

// InsertVisitors mocks base method.
func (m *MockCompanyAdapterInterfaces) InsertVisitors(arg0 entities.Visitors) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertVisitors", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertVisitors indicates an expected call of InsertVisitors.
func (mr *MockCompanyAdapterInterfacesMockRecorder) InsertVisitors(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertVisitors", reflect.TypeOf((*MockCompanyAdapterInterfaces)(nil).InsertVisitors), arg0)
}

// IsCompanyUsernameExists mocks base method.
func (m *MockCompanyAdapterInterfaces) IsCompanyUsernameExists(arg0 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsCompanyUsernameExists", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsCompanyUsernameExists indicates an expected call of IsCompanyUsernameExists.
func (mr *MockCompanyAdapterInterfacesMockRecorder) IsCompanyUsernameExists(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsCompanyUsernameExists", reflect.TypeOf((*MockCompanyAdapterInterfaces)(nil).IsCompanyUsernameExists), arg0)
}

// IsMemberExists mocks base method.
func (m *MockCompanyAdapterInterfaces) IsMemberExists(arg0, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsMemberExists", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsMemberExists indicates an expected call of IsMemberExists.
func (mr *MockCompanyAdapterInterfacesMockRecorder) IsMemberExists(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsMemberExists", reflect.TypeOf((*MockCompanyAdapterInterfaces)(nil).IsMemberExists), arg0, arg1)
}

// IsOwner mocks base method.
func (m *MockCompanyAdapterInterfaces) IsOwner(arg0, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsOwner", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsOwner indicates an expected call of IsOwner.
func (mr *MockCompanyAdapterInterfacesMockRecorder) IsOwner(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsOwner", reflect.TypeOf((*MockCompanyAdapterInterfaces)(nil).IsOwner), arg0, arg1)
}

// IsRoleIDExists mocks base method.
func (m *MockCompanyAdapterInterfaces) IsRoleIDExists(arg0 uint) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsRoleIDExists", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsRoleIDExists indicates an expected call of IsRoleIDExists.
func (mr *MockCompanyAdapterInterfacesMockRecorder) IsRoleIDExists(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsRoleIDExists", reflect.TypeOf((*MockCompanyAdapterInterfaces)(nil).IsRoleIDExists), arg0)
}

// LogintoCompany mocks base method.
func (m *MockCompanyAdapterInterfaces) LogintoCompany(arg0, arg1 string) (entities.LogintoCompanyUsecase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogintoCompany", arg0, arg1)
	ret0, _ := ret[0].(entities.LogintoCompanyUsecase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LogintoCompany indicates an expected call of LogintoCompany.
func (mr *MockCompanyAdapterInterfacesMockRecorder) LogintoCompany(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogintoCompany", reflect.TypeOf((*MockCompanyAdapterInterfaces)(nil).LogintoCompany), arg0, arg1)
}

// PostJob mocks base method.
func (m *MockCompanyAdapterInterfaces) PostJob(arg0 entities.Address, arg1 entities.Jobs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostJob", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PostJob indicates an expected call of PostJob.
func (mr *MockCompanyAdapterInterfacesMockRecorder) PostJob(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostJob", reflect.TypeOf((*MockCompanyAdapterInterfaces)(nil).PostJob), arg0, arg1)
}

// RaiseProblem mocks base method.
func (m *MockCompanyAdapterInterfaces) RaiseProblem(arg0 entities.Problems) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RaiseProblem", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RaiseProblem indicates an expected call of RaiseProblem.
func (mr *MockCompanyAdapterInterfacesMockRecorder) RaiseProblem(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RaiseProblem", reflect.TypeOf((*MockCompanyAdapterInterfaces)(nil).RaiseProblem), arg0)
}

// RescheduleInterview mocks base method.
func (m *MockCompanyAdapterInterfaces) RescheduleInterview(arg0 entities.ScheduledInterviews) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RescheduleInterview", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RescheduleInterview indicates an expected call of RescheduleInterview.
func (mr *MockCompanyAdapterInterfacesMockRecorder) RescheduleInterview(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RescheduleInterview", reflect.TypeOf((*MockCompanyAdapterInterfaces)(nil).RescheduleInterview), arg0)
}

// ResolveProblem mocks base method.
func (m *MockCompanyAdapterInterfaces) ResolveProblem(arg0 uint, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveProblem", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResolveProblem indicates an expected call of ResolveProblem.
func (mr *MockCompanyAdapterInterfacesMockRecorder) ResolveProblem(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveProblem", reflect.TypeOf((*MockCompanyAdapterInterfaces)(nil).ResolveProblem), arg0, arg1)
}

// SalaryIncrementofEmployee mocks base method.
func (m *MockCompanyAdapterInterfaces) SalaryIncrementofEmployee(arg0, arg1 string, arg2 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SalaryIncrementofEmployee", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SalaryIncrementofEmployee indicates an expected call of SalaryIncrementofEmployee.
func (mr *MockCompanyAdapterInterfacesMockRecorder) SalaryIncrementofEmployee(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SalaryIncrementofEmployee", reflect.TypeOf((*MockCompanyAdapterInterfaces)(nil).SalaryIncrementofEmployee), arg0, arg1, arg2)
}

// SalaryIncrementofRole mocks base method.
func (m *MockCompanyAdapterInterfaces) SalaryIncrementofRole(arg0 string, arg1 uint, arg2 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SalaryIncrementofRole", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SalaryIncrementofRole indicates an expected call of SalaryIncrementofRole.
func (mr *MockCompanyAdapterInterfacesMockRecorder) SalaryIncrementofRole(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SalaryIncrementofRole", reflect.TypeOf((*MockCompanyAdapterInterfaces)(nil).SalaryIncrementofRole), arg0, arg1, arg2)
}

// ScheduleInterviews mocks base method.
func (m *MockCompanyAdapterInterfaces) ScheduleInterviews(arg0 entities.ScheduledInterviews) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScheduleInterviews", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ScheduleInterviews indicates an expected call of ScheduleInterviews.
func (mr *MockCompanyAdapterInterfacesMockRecorder) ScheduleInterviews(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduleInterviews", reflect.TypeOf((*MockCompanyAdapterInterfaces)(nil).ScheduleInterviews), arg0)
}

// ShortlistApplications mocks base method.
func (m *MockCompanyAdapterInterfaces) ShortlistApplications(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShortlistApplications", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ShortlistApplications indicates an expected call of ShortlistApplications.
func (mr *MockCompanyAdapterInterfacesMockRecorder) ShortlistApplications(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShortlistApplications", reflect.TypeOf((*MockCompanyAdapterInterfaces)(nil).ShortlistApplications), arg0)
}

// TerminateEmployee mocks base method.
func (m *MockCompanyAdapterInterfaces) TerminateEmployee(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TerminateEmployee", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// TerminateEmployee indicates an expected call of TerminateEmployee.
func (mr *MockCompanyAdapterInterfacesMockRecorder) TerminateEmployee(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TerminateEmployee", reflect.TypeOf((*MockCompanyAdapterInterfaces)(nil).TerminateEmployee), arg0, arg1)
}

// ToggleIsPayed mocks base method.
func (m *MockCompanyAdapterInterfaces) ToggleIsPayed(arg0 string, arg1 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToggleIsPayed", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ToggleIsPayed indicates an expected call of ToggleIsPayed.
func (mr *MockCompanyAdapterInterfacesMockRecorder) ToggleIsPayed(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToggleIsPayed", reflect.TypeOf((*MockCompanyAdapterInterfaces)(nil).ToggleIsPayed), arg0, arg1)
}

// UpdateCompanyPolicies mocks base method.
func (m *MockCompanyAdapterInterfaces) UpdateCompanyPolicies(arg0 entities.CompanyPolicies) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCompanyPolicies", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCompanyPolicies indicates an expected call of UpdateCompanyPolicies.
func (mr *MockCompanyAdapterInterfacesMockRecorder) UpdateCompanyPolicies(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCompanyPolicies", reflect.TypeOf((*MockCompanyAdapterInterfaces)(nil).UpdateCompanyPolicies), arg0)
}

// UpdateCompanypolicies mocks base method.
func (m *MockCompanyAdapterInterfaces) UpdateCompanypolicies(arg0 entities.CompanyPolicies) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCompanypolicies", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCompanypolicies indicates an expected call of UpdateCompanypolicies.
func (mr *MockCompanyAdapterInterfacesMockRecorder) UpdateCompanypolicies(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCompanypolicies", reflect.TypeOf((*MockCompanyAdapterInterfaces)(nil).UpdateCompanypolicies), arg0)
}

// UpdateJob mocks base method.
func (m *MockCompanyAdapterInterfaces) UpdateJob(arg0 entities.Jobs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateJob", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateJob indicates an expected call of UpdateJob.
func (mr *MockCompanyAdapterInterfacesMockRecorder) UpdateJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateJob", reflect.TypeOf((*MockCompanyAdapterInterfaces)(nil).UpdateJob), arg0)
}

// UpdatePayRollofEmployee mocks base method.
func (m *MockCompanyAdapterInterfaces) UpdatePayRollofEmployee(arg0 entities.PayRoll) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePayRollofEmployee", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePayRollofEmployee indicates an expected call of UpdatePayRollofEmployee.
func (mr *MockCompanyAdapterInterfacesMockRecorder) UpdatePayRollofEmployee(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePayRollofEmployee", reflect.TypeOf((*MockCompanyAdapterInterfaces)(nil).UpdatePayRollofEmployee), arg0)
}

// UpdateRevenueStatus mocks base method.
func (m *MockCompanyAdapterInterfaces) UpdateRevenueStatus(arg0 entities.UpdateRevenueStatusUsecase) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRevenueStatus", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRevenueStatus indicates an expected call of UpdateRevenueStatus.
func (mr *MockCompanyAdapterInterfacesMockRecorder) UpdateRevenueStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRevenueStatus", reflect.TypeOf((*MockCompanyAdapterInterfaces)(nil).UpdateRevenueStatus), arg0)
}
