// Code generated by MockGen. DO NOT EDIT.
// Source: usecaseInterface.go

// Package mock_usecases is a generated GoMock package.
package mock_usecases

import (
	reflect "reflect"
	time "time"

	entities "github.com/akshay0074700747/project-company_management-company-service/entities"
	gomock "github.com/golang/mock/gomock"
)

// MockCompanyUsecaseInterfaces is a mock of CompanyUsecaseInterfaces interface.
type MockCompanyUsecaseInterfaces struct {
	ctrl     *gomock.Controller
	recorder *MockCompanyUsecaseInterfacesMockRecorder
}

// MockCompanyUsecaseInterfacesMockRecorder is the mock recorder for MockCompanyUsecaseInterfaces.
type MockCompanyUsecaseInterfacesMockRecorder struct {
	mock *MockCompanyUsecaseInterfaces
}

// NewMockCompanyUsecaseInterfaces creates a new mock instance.
func NewMockCompanyUsecaseInterfaces(ctrl *gomock.Controller) *MockCompanyUsecaseInterfaces {
	mock := &MockCompanyUsecaseInterfaces{ctrl: ctrl}
	mock.recorder = &MockCompanyUsecaseInterfacesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCompanyUsecaseInterfaces) EXPECT() *MockCompanyUsecaseInterfacesMockRecorder {
	return m.recorder
}

// AddCompanyType mocks base method.
func (m *MockCompanyUsecaseInterfaces) AddCompanyType(arg0 entities.CompanyTypes) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCompanyType", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddCompanyType indicates an expected call of AddCompanyType.
func (mr *MockCompanyUsecaseInterfacesMockRecorder) AddCompanyType(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCompanyType", reflect.TypeOf((*MockCompanyUsecaseInterfaces)(nil).AddCompanyType), arg0)
}

// AddMember mocks base method.
func (m *MockCompanyUsecaseInterfaces) AddMember(arg0 entities.CompanyMembers) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMember", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddMember indicates an expected call of AddMember.
func (mr *MockCompanyUsecaseInterfacesMockRecorder) AddMember(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMember", reflect.TypeOf((*MockCompanyUsecaseInterfaces)(nil).AddMember), arg0)
}

// AddMemberStatueses mocks base method.
func (m *MockCompanyUsecaseInterfaces) AddMemberStatueses(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMemberStatueses", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddMemberStatueses indicates an expected call of AddMemberStatueses.
func (mr *MockCompanyUsecaseInterfacesMockRecorder) AddMemberStatueses(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMemberStatueses", reflect.TypeOf((*MockCompanyUsecaseInterfaces)(nil).AddMemberStatueses), arg0)
}

// AddPermissions mocks base method.
func (m *MockCompanyUsecaseInterfaces) AddPermissions(arg0 entities.Permissions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPermissions", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPermissions indicates an expected call of AddPermissions.
func (mr *MockCompanyUsecaseInterfacesMockRecorder) AddPermissions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPermissions", reflect.TypeOf((*MockCompanyUsecaseInterfaces)(nil).AddPermissions), arg0)
}

// ApplyJob mocks base method.
func (m *MockCompanyUsecaseInterfaces) ApplyJob(arg0 entities.JobApplications) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyJob", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplyJob indicates an expected call of ApplyJob.
func (mr *MockCompanyUsecaseInterfacesMockRecorder) ApplyJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyJob", reflect.TypeOf((*MockCompanyUsecaseInterfaces)(nil).ApplyJob), arg0)
}

// ApplyforLeave mocks base method.
func (m *MockCompanyUsecaseInterfaces) ApplyforLeave(arg0 entities.Leaves) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyforLeave", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplyforLeave indicates an expected call of ApplyforLeave.
func (mr *MockCompanyUsecaseInterfacesMockRecorder) ApplyforLeave(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyforLeave", reflect.TypeOf((*MockCompanyUsecaseInterfaces)(nil).ApplyforLeave), arg0)
}

// AssignProblemToEmployee mocks base method.
func (m *MockCompanyUsecaseInterfaces) AssignProblemToEmployee(arg0 string, arg1 uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignProblemToEmployee", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssignProblemToEmployee indicates an expected call of AssignProblemToEmployee.
func (mr *MockCompanyUsecaseInterfacesMockRecorder) AssignProblemToEmployee(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignProblemToEmployee", reflect.TypeOf((*MockCompanyUsecaseInterfaces)(nil).AssignProblemToEmployee), arg0, arg1)
}

// AttachClientwithProject mocks base method.
func (m *MockCompanyUsecaseInterfaces) AttachClientwithProject(arg0 entities.Clients, arg1 string, arg2 uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AttachClientwithProject", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AttachClientwithProject indicates an expected call of AttachClientwithProject.
func (mr *MockCompanyUsecaseInterfacesMockRecorder) AttachClientwithProject(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachClientwithProject", reflect.TypeOf((*MockCompanyUsecaseInterfaces)(nil).AttachClientwithProject), arg0, arg1, arg2)
}

// AttachRolewithPremission mocks base method.
func (m *MockCompanyUsecaseInterfaces) AttachRolewithPremission(arg0 entities.CompanyRoles) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AttachRolewithPremission", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AttachRolewithPremission indicates an expected call of AttachRolewithPremission.
func (mr *MockCompanyUsecaseInterfacesMockRecorder) AttachRolewithPremission(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachRolewithPremission", reflect.TypeOf((*MockCompanyUsecaseInterfaces)(nil).AttachRolewithPremission), arg0)
}

// DeleteJob mocks base method.
func (m *MockCompanyUsecaseInterfaces) DeleteJob(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteJob", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteJob indicates an expected call of DeleteJob.
func (mr *MockCompanyUsecaseInterfacesMockRecorder) DeleteJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteJob", reflect.TypeOf((*MockCompanyUsecaseInterfaces)(nil).DeleteJob), arg0)
}

// DeleteProblem mocks base method.
func (m *MockCompanyUsecaseInterfaces) DeleteProblem(arg0 uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProblem", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProblem indicates an expected call of DeleteProblem.
func (mr *MockCompanyUsecaseInterfacesMockRecorder) DeleteProblem(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProblem", reflect.TypeOf((*MockCompanyUsecaseInterfaces)(nil).DeleteProblem), arg0)
}

// DropClient mocks base method.
func (m *MockCompanyUsecaseInterfaces) DropClient(arg0 entities.Clients) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DropClient", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DropClient indicates an expected call of DropClient.
func (mr *MockCompanyUsecaseInterfacesMockRecorder) DropClient(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropClient", reflect.TypeOf((*MockCompanyUsecaseInterfaces)(nil).DropClient), arg0)
}

// DropCompany mocks base method.
func (m *MockCompanyUsecaseInterfaces) DropCompany(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DropCompany", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DropCompany indicates an expected call of DropCompany.
func (mr *MockCompanyUsecaseInterfacesMockRecorder) DropCompany(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropCompany", reflect.TypeOf((*MockCompanyUsecaseInterfaces)(nil).DropCompany), arg0)
}

// EditCompanyDetails mocks base method.
func (m *MockCompanyUsecaseInterfaces) EditCompanyDetails(arg0 entities.Credentials) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditCompanyDetails", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// EditCompanyDetails indicates an expected call of EditCompanyDetails.
func (mr *MockCompanyUsecaseInterfacesMockRecorder) EditCompanyDetails(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditCompanyDetails", reflect.TypeOf((*MockCompanyUsecaseInterfaces)(nil).EditCompanyDetails), arg0)
}

// EditCompanyEmployees mocks base method.
func (m *MockCompanyUsecaseInterfaces) EditCompanyEmployees(arg0 entities.CompanyMembers) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditCompanyEmployees", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// EditCompanyEmployees indicates an expected call of EditCompanyEmployees.
func (mr *MockCompanyUsecaseInterfacesMockRecorder) EditCompanyEmployees(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditCompanyEmployees", reflect.TypeOf((*MockCompanyUsecaseInterfaces)(nil).EditCompanyEmployees), arg0)
}

// EditProblem mocks base method.
func (m *MockCompanyUsecaseInterfaces) EditProblem(arg0 entities.Problems) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditProblem", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// EditProblem indicates an expected call of EditProblem.
func (mr *MockCompanyUsecaseInterfacesMockRecorder) EditProblem(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditProblem", reflect.TypeOf((*MockCompanyUsecaseInterfaces)(nil).EditProblem), arg0)
}

// GetApplicationsforJob mocks base method.
func (m *MockCompanyUsecaseInterfaces) GetApplicationsforJob(arg0 string) ([]entities.JobApplications, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationsforJob", arg0)
	ret0, _ := ret[0].([]entities.JobApplications)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationsforJob indicates an expected call of GetApplicationsforJob.
func (mr *MockCompanyUsecaseInterfacesMockRecorder) GetApplicationsforJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationsforJob", reflect.TypeOf((*MockCompanyUsecaseInterfaces)(nil).GetApplicationsforJob), arg0)
}

// GetAppliedLeaves mocks base method.
func (m *MockCompanyUsecaseInterfaces) GetAppliedLeaves(arg0 string) ([]entities.Leaves, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppliedLeaves", arg0)
	ret0, _ := ret[0].([]entities.Leaves)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppliedLeaves indicates an expected call of GetAppliedLeaves.
func (mr *MockCompanyUsecaseInterfacesMockRecorder) GetAppliedLeaves(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppliedLeaves", reflect.TypeOf((*MockCompanyUsecaseInterfaces)(nil).GetAppliedLeaves), arg0)
}

// GetAssignedProblems mocks base method.
func (m *MockCompanyUsecaseInterfaces) GetAssignedProblems(arg0, arg1 string) ([]entities.Problems, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAssignedProblems", arg0, arg1)
	ret0, _ := ret[0].([]entities.Problems)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAssignedProblems indicates an expected call of GetAssignedProblems.
func (mr *MockCompanyUsecaseInterfacesMockRecorder) GetAssignedProblems(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssignedProblems", reflect.TypeOf((*MockCompanyUsecaseInterfaces)(nil).GetAssignedProblems), arg0, arg1)
}

// GetAverageSalaryperRole mocks base method.
func (m *MockCompanyUsecaseInterfaces) GetAverageSalaryperRole(arg0 string) ([]entities.AverageSalaryperRoleUsecase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAverageSalaryperRole", arg0)
	ret0, _ := ret[0].([]entities.AverageSalaryperRoleUsecase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAverageSalaryperRole indicates an expected call of GetAverageSalaryperRole.
func (mr *MockCompanyUsecaseInterfacesMockRecorder) GetAverageSalaryperRole(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAverageSalaryperRole", reflect.TypeOf((*MockCompanyUsecaseInterfaces)(nil).GetAverageSalaryperRole), arg0)
}

// GetClientID mocks base method.
func (m *MockCompanyUsecaseInterfaces) GetClientID(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientID", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientID indicates an expected call of GetClientID.
func (mr *MockCompanyUsecaseInterfacesMockRecorder) GetClientID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientID", reflect.TypeOf((*MockCompanyUsecaseInterfaces)(nil).GetClientID), arg0)
}

// GetClients mocks base method.
func (m *MockCompanyUsecaseInterfaces) GetClients(arg0 string) ([]entities.GetClientsUsecase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClients", arg0)
	ret0, _ := ret[0].([]entities.GetClientsUsecase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClients indicates an expected call of GetClients.
func (mr *MockCompanyUsecaseInterfacesMockRecorder) GetClients(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClients", reflect.TypeOf((*MockCompanyUsecaseInterfaces)(nil).GetClients), arg0)
}

// GetCompanyDetails mocks base method.
func (m *MockCompanyUsecaseInterfaces) GetCompanyDetails(arg0 string) (entities.ComapnyDetailsUsecase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompanyDetails", arg0)
	ret0, _ := ret[0].(entities.ComapnyDetailsUsecase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompanyDetails indicates an expected call of GetCompanyDetails.
func (mr *MockCompanyUsecaseInterfacesMockRecorder) GetCompanyDetails(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompanyDetails", reflect.TypeOf((*MockCompanyUsecaseInterfaces)(nil).GetCompanyDetails), arg0)
}

// GetCompanyMembers mocks base method.
func (m *MockCompanyUsecaseInterfaces) GetCompanyMembers(arg0 string) ([]entities.GetCompanyEmployeesUsecase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompanyMembers", arg0)
	ret0, _ := ret[0].([]entities.GetCompanyEmployeesUsecase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompanyMembers indicates an expected call of GetCompanyMembers.
func (mr *MockCompanyUsecaseInterfacesMockRecorder) GetCompanyMembers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompanyMembers", reflect.TypeOf((*MockCompanyUsecaseInterfaces)(nil).GetCompanyMembers), arg0)
}

// GetCompanyTypes mocks base method.
func (m *MockCompanyUsecaseInterfaces) GetCompanyTypes() ([]entities.CompanyTypes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompanyTypes")
	ret0, _ := ret[0].([]entities.CompanyTypes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompanyTypes indicates an expected call of GetCompanyTypes.
func (mr *MockCompanyUsecaseInterfacesMockRecorder) GetCompanyTypes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompanyTypes", reflect.TypeOf((*MockCompanyUsecaseInterfaces)(nil).GetCompanyTypes))
}

// GetDetialsodApplicationbyID mocks base method.
func (m *MockCompanyUsecaseInterfaces) GetDetialsodApplicationbyID(arg0 string) (entities.JobApplications, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDetialsodApplicationbyID", arg0)
	ret0, _ := ret[0].(entities.JobApplications)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDetialsodApplicationbyID indicates an expected call of GetDetialsodApplicationbyID.
func (mr *MockCompanyUsecaseInterfacesMockRecorder) GetDetialsodApplicationbyID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDetialsodApplicationbyID", reflect.TypeOf((*MockCompanyUsecaseInterfaces)(nil).GetDetialsodApplicationbyID), arg0)
}

// GetEmployeeLeaderBoard mocks base method.
func (m *MockCompanyUsecaseInterfaces) GetEmployeeLeaderBoard(arg0 string) ([]entities.GetEmployeeLeaderBoardUsecase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmployeeLeaderBoard", arg0)
	ret0, _ := ret[0].([]entities.GetEmployeeLeaderBoardUsecase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmployeeLeaderBoard indicates an expected call of GetEmployeeLeaderBoard.
func (mr *MockCompanyUsecaseInterfacesMockRecorder) GetEmployeeLeaderBoard(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmployeeLeaderBoard", reflect.TypeOf((*MockCompanyUsecaseInterfaces)(nil).GetEmployeeLeaderBoard), arg0)
}

// GetJobApplicationsofUser mocks base method.
func (m *MockCompanyUsecaseInterfaces) GetJobApplicationsofUser(arg0 string) ([]entities.GetJobApplicationsofUserUsecase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobApplicationsofUser", arg0)
	ret0, _ := ret[0].([]entities.GetJobApplicationsofUserUsecase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobApplicationsofUser indicates an expected call of GetJobApplicationsofUser.
func (mr *MockCompanyUsecaseInterfacesMockRecorder) GetJobApplicationsofUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobApplicationsofUser", reflect.TypeOf((*MockCompanyUsecaseInterfaces)(nil).GetJobApplicationsofUser), arg0)
}

// GetJobs mocks base method.
func (m *MockCompanyUsecaseInterfaces) GetJobs(arg0, arg1 string) ([]entities.Jobs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobs", arg0, arg1)
	ret0, _ := ret[0].([]entities.Jobs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobs indicates an expected call of GetJobs.
func (mr *MockCompanyUsecaseInterfacesMockRecorder) GetJobs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobs", reflect.TypeOf((*MockCompanyUsecaseInterfaces)(nil).GetJobs), arg0, arg1)
}

// GetJobsofCompany mocks base method.
func (m *MockCompanyUsecaseInterfaces) GetJobsofCompany(arg0 string) ([]entities.Jobs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobsofCompany", arg0)
	ret0, _ := ret[0].([]entities.Jobs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobsofCompany indicates an expected call of GetJobsofCompany.
func (mr *MockCompanyUsecaseInterfacesMockRecorder) GetJobsofCompany(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobsofCompany", reflect.TypeOf((*MockCompanyUsecaseInterfaces)(nil).GetJobsofCompany), arg0)
}

// GetLeaves mocks base method.
func (m *MockCompanyUsecaseInterfaces) GetLeaves(arg0 string) ([]entities.Leaves, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLeaves", arg0)
	ret0, _ := ret[0].([]entities.Leaves)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLeaves indicates an expected call of GetLeaves.
func (mr *MockCompanyUsecaseInterfacesMockRecorder) GetLeaves(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLeaves", reflect.TypeOf((*MockCompanyUsecaseInterfaces)(nil).GetLeaves), arg0)
}

// GetPastProjects mocks base method.
func (m *MockCompanyUsecaseInterfaces) GetPastProjects(arg0 string) ([]entities.GetPastProjectsUsecase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPastProjects", arg0)
	ret0, _ := ret[0].([]entities.GetPastProjectsUsecase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPastProjects indicates an expected call of GetPastProjects.
func (mr *MockCompanyUsecaseInterfacesMockRecorder) GetPastProjects(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPastProjects", reflect.TypeOf((*MockCompanyUsecaseInterfaces)(nil).GetPastProjects), arg0)
}

// GetPermission mocks base method.
func (m *MockCompanyUsecaseInterfaces) GetPermission(arg0 uint) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPermission", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPermission indicates an expected call of GetPermission.
func (mr *MockCompanyUsecaseInterfacesMockRecorder) GetPermission(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPermission", reflect.TypeOf((*MockCompanyUsecaseInterfaces)(nil).GetPermission), arg0)
}

// GetPermissions mocks base method.
func (m *MockCompanyUsecaseInterfaces) GetPermissions() ([]entities.Permissions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPermissions")
	ret0, _ := ret[0].([]entities.Permissions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPermissions indicates an expected call of GetPermissions.
func (mr *MockCompanyUsecaseInterfacesMockRecorder) GetPermissions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPermissions", reflect.TypeOf((*MockCompanyUsecaseInterfaces)(nil).GetPermissions))
}

// GetProblems mocks base method.
func (m *MockCompanyUsecaseInterfaces) GetProblems(arg0 string) ([]entities.Problems, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProblems", arg0)
	ret0, _ := ret[0].([]entities.Problems)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProblems indicates an expected call of GetProblems.
func (mr *MockCompanyUsecaseInterfacesMockRecorder) GetProblems(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProblems", reflect.TypeOf((*MockCompanyUsecaseInterfaces)(nil).GetProblems), arg0)
}

// GetProfileViews mocks base method.
func (m *MockCompanyUsecaseInterfaces) GetProfileViews(arg0 string, arg1, arg2 time.Time) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfileViews", arg0, arg1, arg2)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfileViews indicates an expected call of GetProfileViews.
func (mr *MockCompanyUsecaseInterfacesMockRecorder) GetProfileViews(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfileViews", reflect.TypeOf((*MockCompanyUsecaseInterfaces)(nil).GetProfileViews), arg0, arg1, arg2)
}

// GetRevenuesGenerated mocks base method.
func (m *MockCompanyUsecaseInterfaces) GetRevenuesGenerated(arg0 string) ([]entities.GetRevenueGeneratedUsecase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRevenuesGenerated", arg0)
	ret0, _ := ret[0].([]entities.GetRevenueGeneratedUsecase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRevenuesGenerated indicates an expected call of GetRevenuesGenerated.
func (mr *MockCompanyUsecaseInterfacesMockRecorder) GetRevenuesGenerated(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRevenuesGenerated", reflect.TypeOf((*MockCompanyUsecaseInterfaces)(nil).GetRevenuesGenerated), arg0)
}

// GetRolesWithPermissions mocks base method.
func (m *MockCompanyUsecaseInterfaces) GetRolesWithPermissions(compID string) ([]entities.CompanyRoles, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRolesWithPermissions", compID)
	ret0, _ := ret[0].([]entities.CompanyRoles)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRolesWithPermissions indicates an expected call of GetRolesWithPermissions.
func (mr *MockCompanyUsecaseInterfacesMockRecorder) GetRolesWithPermissions(compID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRolesWithPermissions", reflect.TypeOf((*MockCompanyUsecaseInterfaces)(nil).GetRolesWithPermissions), compID)
}

// GetScheduledInterviews mocks base method.
func (m *MockCompanyUsecaseInterfaces) GetScheduledInterviews(arg0 string) ([]entities.ScheduledInterviews, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScheduledInterviews", arg0)
	ret0, _ := ret[0].([]entities.ScheduledInterviews)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetScheduledInterviews indicates an expected call of GetScheduledInterviews.
func (mr *MockCompanyUsecaseInterfacesMockRecorder) GetScheduledInterviews(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScheduledInterviews", reflect.TypeOf((*MockCompanyUsecaseInterfaces)(nil).GetScheduledInterviews), arg0)
}

// GetScheduledInterviewsofUser mocks base method.
func (m *MockCompanyUsecaseInterfaces) GetScheduledInterviewsofUser(arg0 string) ([]entities.ScheduledInterviews, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScheduledInterviewsofUser", arg0)
	ret0, _ := ret[0].([]entities.ScheduledInterviews)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetScheduledInterviewsofUser indicates an expected call of GetScheduledInterviewsofUser.
func (mr *MockCompanyUsecaseInterfacesMockRecorder) GetScheduledInterviewsofUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScheduledInterviewsofUser", reflect.TypeOf((*MockCompanyUsecaseInterfaces)(nil).GetScheduledInterviewsofUser), arg0)
}

// GetShortlistedApplications mocks base method.
func (m *MockCompanyUsecaseInterfaces) GetShortlistedApplications(arg0 string) ([]entities.JobApplications, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShortlistedApplications", arg0)
	ret0, _ := ret[0].([]entities.JobApplications)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShortlistedApplications indicates an expected call of GetShortlistedApplications.
func (mr *MockCompanyUsecaseInterfacesMockRecorder) GetShortlistedApplications(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShortlistedApplications", reflect.TypeOf((*MockCompanyUsecaseInterfaces)(nil).GetShortlistedApplications), arg0)
}

// GetVisitors mocks base method.
func (m *MockCompanyUsecaseInterfaces) GetVisitors(arg0 string) ([]entities.Visitors, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVisitors", arg0)
	ret0, _ := ret[0].([]entities.Visitors)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVisitors indicates an expected call of GetVisitors.
func (mr *MockCompanyUsecaseInterfacesMockRecorder) GetVisitors(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVisitors", reflect.TypeOf((*MockCompanyUsecaseInterfaces)(nil).GetVisitors), arg0)
}

// GetVisitorsWithinTimeframe mocks base method.
func (m *MockCompanyUsecaseInterfaces) GetVisitorsWithinTimeframe(arg0 string, arg1, arg2 time.Time) ([]entities.Visitors, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVisitorsWithinTimeframe", arg0, arg1, arg2)
	ret0, _ := ret[0].([]entities.Visitors)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVisitorsWithinTimeframe indicates an expected call of GetVisitorsWithinTimeframe.
func (mr *MockCompanyUsecaseInterfacesMockRecorder) GetVisitorsWithinTimeframe(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVisitorsWithinTimeframe", reflect.TypeOf((*MockCompanyUsecaseInterfaces)(nil).GetVisitorsWithinTimeframe), arg0, arg1, arg2)
}

// GrantLeave mocks base method.
func (m *MockCompanyUsecaseInterfaces) GrantLeave(arg0 uint, arg1 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GrantLeave", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GrantLeave indicates an expected call of GrantLeave.
func (mr *MockCompanyUsecaseInterfacesMockRecorder) GrantLeave(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GrantLeave", reflect.TypeOf((*MockCompanyUsecaseInterfaces)(nil).GrantLeave), arg0, arg1)
}

// InsertIntoClients mocks base method.
func (m *MockCompanyUsecaseInterfaces) InsertIntoClients(arg0 entities.Clients) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertIntoClients", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertIntoClients indicates an expected call of InsertIntoClients.
func (mr *MockCompanyUsecaseInterfacesMockRecorder) InsertIntoClients(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertIntoClients", reflect.TypeOf((*MockCompanyUsecaseInterfaces)(nil).InsertIntoClients), arg0)
}

// InsertVisitors mocks base method.
func (m *MockCompanyUsecaseInterfaces) InsertVisitors(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertVisitors", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertVisitors indicates an expected call of InsertVisitors.
func (mr *MockCompanyUsecaseInterfacesMockRecorder) InsertVisitors(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertVisitors", reflect.TypeOf((*MockCompanyUsecaseInterfaces)(nil).InsertVisitors), arg0, arg1)
}

// IsEmployeeExists mocks base method.
func (m *MockCompanyUsecaseInterfaces) IsEmployeeExists(arg0, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsEmployeeExists", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsEmployeeExists indicates an expected call of IsEmployeeExists.
func (mr *MockCompanyUsecaseInterfacesMockRecorder) IsEmployeeExists(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsEmployeeExists", reflect.TypeOf((*MockCompanyUsecaseInterfaces)(nil).IsEmployeeExists), arg0, arg1)
}

// IsOwner mocks base method.
func (m *MockCompanyUsecaseInterfaces) IsOwner(arg0, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsOwner", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsOwner indicates an expected call of IsOwner.
func (mr *MockCompanyUsecaseInterfacesMockRecorder) IsOwner(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsOwner", reflect.TypeOf((*MockCompanyUsecaseInterfaces)(nil).IsOwner), arg0, arg1)
}

// LogintoCompany mocks base method.
func (m *MockCompanyUsecaseInterfaces) LogintoCompany(arg0, arg1 string) (entities.LogintoCompanyUsecase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogintoCompany", arg0, arg1)
	ret0, _ := ret[0].(entities.LogintoCompanyUsecase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LogintoCompany indicates an expected call of LogintoCompany.
func (mr *MockCompanyUsecaseInterfacesMockRecorder) LogintoCompany(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogintoCompany", reflect.TypeOf((*MockCompanyUsecaseInterfaces)(nil).LogintoCompany), arg0, arg1)
}

// PostJob mocks base method.
func (m *MockCompanyUsecaseInterfaces) PostJob(arg0 entities.Address, arg1 entities.Jobs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostJob", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PostJob indicates an expected call of PostJob.
func (mr *MockCompanyUsecaseInterfacesMockRecorder) PostJob(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostJob", reflect.TypeOf((*MockCompanyUsecaseInterfaces)(nil).PostJob), arg0, arg1)
}

// RaiseProblem mocks base method.
func (m *MockCompanyUsecaseInterfaces) RaiseProblem(arg0 entities.Problems) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RaiseProblem", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RaiseProblem indicates an expected call of RaiseProblem.
func (mr *MockCompanyUsecaseInterfacesMockRecorder) RaiseProblem(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RaiseProblem", reflect.TypeOf((*MockCompanyUsecaseInterfaces)(nil).RaiseProblem), arg0)
}

// RegisterCompany mocks base method.
func (m *MockCompanyUsecaseInterfaces) RegisterCompany(arg0 entities.CompanyResUsecase, arg1 string) (entities.CompanyResUsecase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterCompany", arg0, arg1)
	ret0, _ := ret[0].(entities.CompanyResUsecase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterCompany indicates an expected call of RegisterCompany.
func (mr *MockCompanyUsecaseInterfacesMockRecorder) RegisterCompany(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterCompany", reflect.TypeOf((*MockCompanyUsecaseInterfaces)(nil).RegisterCompany), arg0, arg1)
}

// RescheduleInterview mocks base method.
func (m *MockCompanyUsecaseInterfaces) RescheduleInterview(arg0 entities.ScheduledInterviews) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RescheduleInterview", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RescheduleInterview indicates an expected call of RescheduleInterview.
func (mr *MockCompanyUsecaseInterfacesMockRecorder) RescheduleInterview(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RescheduleInterview", reflect.TypeOf((*MockCompanyUsecaseInterfaces)(nil).RescheduleInterview), arg0)
}

// ResolveProblem mocks base method.
func (m *MockCompanyUsecaseInterfaces) ResolveProblem(arg0 uint, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveProblem", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResolveProblem indicates an expected call of ResolveProblem.
func (mr *MockCompanyUsecaseInterfacesMockRecorder) ResolveProblem(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveProblem", reflect.TypeOf((*MockCompanyUsecaseInterfaces)(nil).ResolveProblem), arg0, arg1)
}

// SalaryIncrementofEmployee mocks base method.
func (m *MockCompanyUsecaseInterfaces) SalaryIncrementofEmployee(arg0, arg1 string, arg2 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SalaryIncrementofEmployee", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SalaryIncrementofEmployee indicates an expected call of SalaryIncrementofEmployee.
func (mr *MockCompanyUsecaseInterfacesMockRecorder) SalaryIncrementofEmployee(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SalaryIncrementofEmployee", reflect.TypeOf((*MockCompanyUsecaseInterfaces)(nil).SalaryIncrementofEmployee), arg0, arg1, arg2)
}

// SalaryIncrementofRole mocks base method.
func (m *MockCompanyUsecaseInterfaces) SalaryIncrementofRole(arg0 string, arg1 uint, arg2 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SalaryIncrementofRole", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SalaryIncrementofRole indicates an expected call of SalaryIncrementofRole.
func (mr *MockCompanyUsecaseInterfacesMockRecorder) SalaryIncrementofRole(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SalaryIncrementofRole", reflect.TypeOf((*MockCompanyUsecaseInterfaces)(nil).SalaryIncrementofRole), arg0, arg1, arg2)
}

// ScheduleInterviews mocks base method.
func (m *MockCompanyUsecaseInterfaces) ScheduleInterviews(arg0 entities.ScheduledInterviews) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScheduleInterviews", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ScheduleInterviews indicates an expected call of ScheduleInterviews.
func (mr *MockCompanyUsecaseInterfacesMockRecorder) ScheduleInterviews(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduleInterviews", reflect.TypeOf((*MockCompanyUsecaseInterfaces)(nil).ScheduleInterviews), arg0)
}

// ShortlistApplications mocks base method.
func (m *MockCompanyUsecaseInterfaces) ShortlistApplications(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShortlistApplications", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ShortlistApplications indicates an expected call of ShortlistApplications.
func (mr *MockCompanyUsecaseInterfacesMockRecorder) ShortlistApplications(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShortlistApplications", reflect.TypeOf((*MockCompanyUsecaseInterfaces)(nil).ShortlistApplications), arg0)
}

// TerminateEmployee mocks base method.
func (m *MockCompanyUsecaseInterfaces) TerminateEmployee(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TerminateEmployee", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// TerminateEmployee indicates an expected call of TerminateEmployee.
func (mr *MockCompanyUsecaseInterfacesMockRecorder) TerminateEmployee(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TerminateEmployee", reflect.TypeOf((*MockCompanyUsecaseInterfaces)(nil).TerminateEmployee), arg0, arg1)
}

// UpdateCompanyPolicies mocks base method.
func (m *MockCompanyUsecaseInterfaces) UpdateCompanyPolicies(arg0 entities.CompanyPolicies) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCompanyPolicies", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCompanyPolicies indicates an expected call of UpdateCompanyPolicies.
func (mr *MockCompanyUsecaseInterfacesMockRecorder) UpdateCompanyPolicies(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCompanyPolicies", reflect.TypeOf((*MockCompanyUsecaseInterfaces)(nil).UpdateCompanyPolicies), arg0)
}

// UpdateCompanypolicies mocks base method.
func (m *MockCompanyUsecaseInterfaces) UpdateCompanypolicies(arg0 entities.CompanyPolicies) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCompanypolicies", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCompanypolicies indicates an expected call of UpdateCompanypolicies.
func (mr *MockCompanyUsecaseInterfacesMockRecorder) UpdateCompanypolicies(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCompanypolicies", reflect.TypeOf((*MockCompanyUsecaseInterfaces)(nil).UpdateCompanypolicies), arg0)
}

// UpdateJob mocks base method.
func (m *MockCompanyUsecaseInterfaces) UpdateJob(arg0 entities.Jobs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateJob", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateJob indicates an expected call of UpdateJob.
func (mr *MockCompanyUsecaseInterfacesMockRecorder) UpdateJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateJob", reflect.TypeOf((*MockCompanyUsecaseInterfaces)(nil).UpdateJob), arg0)
}

// UpdatePayRollofEmployee mocks base method.
func (m *MockCompanyUsecaseInterfaces) UpdatePayRollofEmployee(arg0 entities.PayRoll) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePayRollofEmployee", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePayRollofEmployee indicates an expected call of UpdatePayRollofEmployee.
func (mr *MockCompanyUsecaseInterfacesMockRecorder) UpdatePayRollofEmployee(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePayRollofEmployee", reflect.TypeOf((*MockCompanyUsecaseInterfaces)(nil).UpdatePayRollofEmployee), arg0)
}

// UpdateRevenueStatus mocks base method.
func (m *MockCompanyUsecaseInterfaces) UpdateRevenueStatus(arg0 entities.UpdateRevenueStatusUsecase) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRevenueStatus", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRevenueStatus indicates an expected call of UpdateRevenueStatus.
func (mr *MockCompanyUsecaseInterfacesMockRecorder) UpdateRevenueStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRevenueStatus", reflect.TypeOf((*MockCompanyUsecaseInterfaces)(nil).UpdateRevenueStatus), arg0)
}
